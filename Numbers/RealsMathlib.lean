import Mathlib
import Numbers.RealsComplete

#check ConditionallyCompleteLinearOrderedField
#check instConditionallyCompleteLinearOrderedFieldReal
#check ConditionallyCompleteLinearOrderedField

noncomputable section
namespace MyReal

def ball (x : MyReal) {r : MyReal} (hr : r > 0) := { y | |x - y| < r }

instance : TopologicalSpace MyReal where
  IsOpen s := ‚àÄ x ‚àà s, ‚àÉ r, ‚àÉ (hr : r > 0), ball x hr ‚äÜ s
  isOpen_univ := by
    intro x _
    refine ‚ü®1, ?_, ?_‚ü©
    ¬∑ simp
    ¬∑ simp
  isOpen_inter := by
    intro s t hs ht
    simp [ball] at *
    intro x xs xt
    specialize hs _ xs
    specialize ht _ xt
    obtain ‚ü®rs, hrs, hs‚ü© := hs
    obtain ‚ü®rt, hrt, ht‚ü© := ht
    refine ‚ü®min rs rt, ?_, ?_, ?_‚ü©
    ¬∑ intro y yh
      simp at yh
      exact hs yh.1
    ¬∑ rw [lt_min_iff]
      exact ‚ü®hrs, hrt‚ü©
    ¬∑ intro y yh
      simp at yh
      exact ht yh.2
  isOpen_sUnion := by
    sorry

-- instance : UniformSpace MyReal := sorry

-- #synth TopologicalSpace Real
-- instance : CompleteSpace MyReal := sorry

-- #check EMetric.complete_of_cauchySeq_tendsto

open MyRat in
theorem exists_isLUB {s : Set MyReal} (hne : s.Nonempty) (hbdd : BddAbove s) : ‚àÉ x, IsLUB s x := by
  rcases hne, hbdd with ‚ü®‚ü®L, hL‚ü©, ‚ü®U, hU‚ü©‚ü©
  have : ‚àÄ d : ‚Ñï, BddAbove { m : MyInt | ‚àÉ y ‚àà s, MyReal.k (j m) ‚â§ y * d } := by
    obtain ‚ü®k, hk‚ü© := exists_int_gt U
    refine fun d => ‚ü®k * d, fun z h => ?_‚ü©
    rcases h with ‚ü®y, yS, hy‚ü©
    rw [natCast_eq] at *
    rw [‚Üê j_le_iff, ‚Üê k_le_iff]
    apply le_trans' _ hy
    have := mul_le_mul_of_nonneg_right ((hU yS).trans hk.le) d.cast_nonneg
    rw [natCast_eq, intCast_eq, ‚Üê k_mul] at this
    simp [j_mul]
    simp at this
    exact this

  have : ‚àÄ d : ‚Ñï, BddAbove { m : ‚Ñ§ | ‚àÉ y ‚àà s, m ‚â§ y * d } := by
    intro d
    specialize this d
    simp_rw [intCast_eq]
    rcases this with ‚ü®U, hU‚ü©
    -- need to convert MyInt to ‚Ñ§
    sorry

  choose f hf using fun d : ‚Ñï =>
    Int.exists_greatest_of_bdd (this d) ‚ü®‚åäL * d‚åã, L, hL, Int.floor_le _‚ü©

  have hf‚ÇÅ : ‚àÄ n > 0, ‚àÉ y ‚àà s, k (j (f n) / i n) ‚â§ y
  ¬∑ intro n n0
    obtain ‚ü®y, yS, hy‚ü© := (hf n).1
    rw [natCast_eq, intCast_eq] at hy
    refine ‚ü®y, yS, ?_‚ü©
    rw [k_div]
    rw [div_le_iff‚ÇÄ]
    ¬∑ exact hy
    ¬∑ rw [‚Üê k_zero, k_lt_iff, ‚Üê i_zero, i_lt_iff]
      exact n0

  have hf‚ÇÇ : ‚àÄ n : ‚Ñï, n > 0 ‚Üí ‚àÄ y ‚àà s, (y - (k (i n))‚Åª¬π) < k (j (f n) / i n) := by
    intro n n0 y yS
    have := (Int.sub_one_lt_floor _).trans_le (Int.cast_le.2 <| (hf n).2 _ ‚ü®y, yS, Int.floor_le _‚ü©)
    simp only [gt_iff_lt]
    have k_pos : 0 < k (i n)
    ¬∑ rwa [‚Üê k_zero, ‚Üê i_zero, k_lt_iff, i_lt_iff]
    rw [k_div, lt_div_iff‚ÇÄ]
    ¬∑ rw [sub_mul, inv_mul_cancel‚ÇÄ k_pos.ne']
      ¬∑ rw [natCast_eq, intCast_eq] at this
        exact this
    ¬∑ exact k_pos

  have hg : IsCauchy (fun n => k $ j (f n) / i n) := by
    intro Œµ Œµh
    suffices ‚àÄ j ‚â• ‚åàŒµ‚Åª¬π‚åâ‚Çä, ‚àÄ k ‚â• ‚åàŒµ‚Åª¬π‚åâ‚Çä, |(MyReal.k (MyRat.j (f j) / MyRat.i j) - MyReal.k (MyRat.j (f k) / MyRat.i k))| ‚â§ Œµ by
      constructor
      intro p q hp hq
      exact this p hp q hq
    intro j ij k ik
    sorry

  obtain ‚ü®x, hx_lim‚ü© := complete hg
  refine ‚ü®x, ‚ü®fun x xS => ?_, fun y h => ?_‚ü©‚ü©
  ¬∑ refine le_of_forall_lt_imp_le_of_dense fun z xz => ?_
    obtain ‚ü®K, hK‚ü© := exists_nat_gt (x - z)‚Åª¬π
    -- refine le_mk_of_forall_le ‚ü®K, fun n nK => ?_‚ü©
    -- replace xz := sub_pos.2 xz
    -- replace hK := hK.le.trans (Nat.cast_le.2 nK)
    -- have n0 : 0 < n := Nat.cast_pos.1 ((inv_pos.2 xz).trans_le hK)
    -- refine le_trans ?_ (hf‚ÇÇ _ n0 _ xS).le
    -- rwa [le_sub_comm, inv_le_comm‚ÇÄ (Nat.cast_pos.2 n0 : (_ : ‚Ñù) < _) xz]
    sorry
  sorry

-- This is the approach from Mathlib
open scoped Classical in
noncomputable instance : SupSet MyReal :=
  ‚ü®fun s => if h : s.Nonempty ‚àß BddAbove s then Classical.choose (exists_isLUB h.1 h.2) else 0‚ü©

open scoped Classical in
theorem sSup_def (s : Set MyReal) :
    sSup s = if h : s.Nonempty ‚àß BddAbove s then Classical.choose (exists_isLUB h.1 h.2) else 0 :=
  rfl

noncomputable instance : InfSet MyReal :=
  ‚ü®fun s => -sSup (-s)‚ü©

theorem sInf_def (s : Set MyReal) : sInf s = -sSup (-s) := rfl

protected theorem isLUB_sSup {s : Set MyReal} (h‚ÇÅ : s.Nonempty) (h‚ÇÇ : BddAbove s) : IsLUB s (sSup s) := by
  simp only [sSup_def, dif_pos (And.intro h‚ÇÅ h‚ÇÇ)]
  apply Classical.choose_spec

protected theorem isGLB_sInf {s : Set MyReal} (h‚ÇÅ : s.Nonempty) (h‚ÇÇ : BddBelow s) : IsGLB s (sInf s) := by
  rw [sInf_def, ‚Üê isLUB_neg', neg_neg]
  exact MyReal.isLUB_sSup h‚ÇÅ.neg h‚ÇÇ.neg

noncomputable
instance lattice : Lattice MyReal :=
  inferInstance

noncomputable
instance : SemilatticeInf MyReal :=
  inferInstance

noncomputable
instance : SemilatticeSup MyReal :=
  inferInstance

noncomputable instance : ConditionallyCompleteLinearOrder MyReal where
  __ := MyReal.linearOrder
  __ := MyReal.lattice
  le_csSup s a hs ha := (MyReal.isLUB_sSup ‚ü®a, ha‚ü© hs).1 ha
  csSup_le s a hs ha := (MyReal.isLUB_sSup hs ‚ü®a, ha‚ü©).2 ha
  csInf_le s a hs ha := (MyReal.isGLB_sInf ‚ü®a, ha‚ü© hs).1 ha
  le_csInf s a hs ha := (MyReal.isGLB_sInf hs ‚ü®a, ha‚ü©).2 ha
  csSup_of_not_bddAbove s hs := by simp [hs, sSup_def]
  csInf_of_not_bddBelow s hs := by simp [hs, sInf_def, sSup_def]




-- We have ConditionallyCompleteLinearOrder and Field, which can now be combined
instance : ConditionallyCompleteLinearOrderedField MyReal := { }

#synth LinearOrder ‚Ñù

-- To show that our Reals are isomorphic with Mathlib's, we need to construct the following
#check MyReal ‚âÉ+*o ‚Ñù

-- This gives the induced isomorphism between conditionally complete linear ordered fields
#check LinearOrderedField.inducedOrderRingIso

abbrev inducedOrderRingIsoReal : MyReal ‚âÉ+*o ‚Ñù := LinearOrderedField.inducedOrderRingIso MyReal ‚Ñù

-- abbrev inducedEquiv : MyReal ‚âÉ ‚Ñù := inducedOrderRingIsoReal
-- abbrev inducedAddEquiv : MyReal ‚âÉ+ ‚Ñù := inducedOrderRingIsoReal

-- This gives uniqueness up to isomorphism
#check LinearOrderedField.uniqueOrderRingIso

-- MyReals can automatically be coerced to Mathlib's ‚Ñù
instance : Coe MyReal ‚Ñù where
  coe := inducedOrderRingIsoReal

-- We can induce a matric space from Reals to MyReals using the isomorphism
-- This can be copied from Real.pseudoMetricSpace
instance : PseudoMetricSpace MyReal where
  dist x y := |x - y|
  dist_self := by simp
  dist_comm _ _ := abs_sub_comm _ _
  dist_triangle _ _ _ := abs_sub_le _ _ _

#synth PseudoMetricSpace MyReal

#synth TopologicalSpace MyReal -- this is wrong, need to override
instance (priority := 1000) : TopologicalSpace MyReal := PseudoMetricSpace.toUniformSpace.toTopologicalSpace

end MyReal

section Example

open MyReal

-- Now for some basic real analysis

def f (x : MyReal) : MyReal := x - 1

open Filter Topology in
example : Tendsto f (ùìù 3) (ùìù 2) := by
  rw [Metric.tendsto_nhds_nhds]
  intro Œµ Œµh
  use Œµ / 2 -- we are working with ‚Ñù
  constructor
  ¬∑ linarith
  ¬∑ intro x hx
    unfold f
    simp [dist] at *
    rw [abs_lt] at *
    -- simp [LinearOrderedField.inducedMap]
    sorry

end Example

-- #min_imports
